cmake_minimum_required (VERSION 2.6)
project (nyom)

set(CTF_HOME CACHE PATH "path to configured CTF source or build directory")

if( CTF_HOME )
  include_directories(${CTF_HOME}/include)
  link_directories(${CTF_HOME}/lib)
  link_libraries( -lctf )
else()
  message( FATAL_ERROR "CTF_HOME must be defined!" )
endif()

set( TMLQCD_SRC CACHE PATH "path to tmLQCD source directory" )
if( TMLQCD_SRC )
  include_directories( ${TMLQCD_SRC}/include )
  include_directories( ${TMLQCD_SRC} )
else()
  message(FATAL_ERROR "TMLQCD_SRC must be defined!" )
endif()

set( TMLQCD_BUILD CACHE PATH "path to tmLQCD build directory (must be build directory for source in TMLQCD_SRC!)" )
if( TMLQCD_BUILD )
  link_directories(${TMLQCD_BUILD}/lib)
  link_libraries( -lwrapper -lhmc -lmonomial -loperator -lmeas -linit -lhmc -lxchange -lrational -lsolver -lio -llinalg -lm )
else()
  message(FATAL_ERROR "TMLQCD_BUILD must be defined!" )
endif()

set( LIME_HOME CACHE PATH "path to the c-lime library installation" )
if( LIME_HOME )
  link_directories(${LIME_HOME}/lib)
  include_directories(${LIME_HOME}/include)
  link_libraries(-llime)
else()
  message(FATAL_ERROR "LIME_HOME must be defined!" )
endif()

set( LEMON_HOME CACHE PATH "path to the LEMON library installation" )
if( LEMON_HOME )
  link_directories(${LEMON_HOME}/lib)
  include_directories(${LEMON_HOME}/include)
  link_libraries(-llime)
endif()

set(CMAKE_CXX_STANDARD 11)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

find_package(yaml-cpp REQUIRED)
message("Found yaml-cpp: ${YAML_CPP_LIBRARIES}")
include_directories(${YAML_CPP_INCLUDE_DIR})
link_libraries(${YAML_CPP_LIBRARIES})

find_package(LAPACK REQUIRED)
if( LAPACK_FOUND )
  set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${LAPACK_LINKER_FLAGS}")
  link_libraries( ${LAPACK_LIBRARIES} )
else()
  message( FATAL_ERROR "Unable to find LAPACK!" )
endif()

find_package(BLAS REQUIRED)
if( BLAS_FOUND )
  set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${BLAS_LINKER_FLAGS}")
  link_libraries( ${BLAS_LIBRARIES} )
else()
  message( FATAL_ERROR "Unable to find BLAS!" )
endif()

find_package(OpenMP REQUIRED)
if (OPENMP_FOUND)
  set (CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
  set (CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
  set (CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
  link_libraries( ${OPENMP_LIBRARIES} )
else()
  message( FATAL_ERROR "Unable to find OpenMP!" )
endif()

find_package(Boost 
             REQUIRED
             program_options)
if( Boost_FOUND )
  link_directories( ${Boost_LIBRARY_DIRS} )
  include_directories( ${Boost_INCLUDE_DIRS} )
  link_libraries( ${Boost_LIBRARIES} )
else()
  message( FATAL_ERROR "Unable to find Boost (or one of the requested components, see CMakeLists.txt!")
endif()

# base package includes and libraries
include_directories(include)

add_subdirectory(tests)
add_subdirectory(manual_tests)
